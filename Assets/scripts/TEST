package org.wikipedia.search;

import android.content.Context;
import android.util.Log;

import com.google.api.client.extensions.android.json.AndroidJsonFactory;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.services.vision.v1.Vision;
import com.google.api.services.vision.v1.VisionRequestInitializer;
import com.google.api.services.vision.v1.model.AnnotateImageRequest;
import com.google.api.services.vision.v1.model.AnnotateImageResponse;
import com.google.api.services.vision.v1.model.BatchAnnotateImagesRequest;
import com.google.api.services.vision.v1.model.BatchAnnotateImagesResponse;
import com.google.api.services.vision.v1.model.Feature;
import com.google.api.services.vision.v1.model.Image;

import org.wikipedia.R;

import java.io.IOException;
import java.util.Arrays;


public class ImageSearch {
    private Vision vision;

    //Pass in the application context with this.getApplicationContext() to access resources
    public ImageSearch(Context applicationContext) {
        Vision.Builder visionBuilder = new Vision.Builder(
                new NetHttpTransport(),
                new AndroidJsonFactory(),
                null);

        visionBuilder.setVisionRequestInitializer(
                new VisionRequestInitializer(applicationContext.getString(R.string.google_vision_api_key)));

        vision = visionBuilder.build();
    }

    public String searchPhoto(byte[] photo) throws IOException {
        String result = "";

        Image inputImage = new Image();
        inputImage.encodeContent(photo);

        Feature desiredFeature = new Feature();
        desiredFeature.setType("WEB_DETECTION");

        AnnotateImageRequest request = new AnnotateImageRequest();
        request.setImage(inputImage);
        request.setFeatures(Arrays.asList(desiredFeature));

        BatchAnnotateImagesRequest batchRequest =
                new BatchAnnotateImagesRequest();

        batchRequest.setRequests(Arrays.asList(request));

        BatchAnnotateImagesResponse batchResponse =
                vision.images().annotate(batchRequest).execute();

        AnnotateImageResponse response = batchResponse.getResponses()
                .get(0);

        Log.d("TEST", response.getTextAnnotations().toString());

        return result;
    }

}

-----------------------------------------------------------------------------------------

// Google Cloud Vision API
    implementation 'com.google.android.gms:play-services-base:11.8.0'
    implementation 'com.google.android.gms:play-services-auth:11.8.0'
    implementation 'com.google.apis:google-api-services-vision:v1-rev16-1.22.0'
    implementation ('com.google.api-client:google-api-client-android:1.22.0') {
        exclude module: 'httpclient'
    }
    implementation ('com.google.http-client:google-http-client-gson:1.20.0') {
        exclude module: 'httpclient'
    }

-----------------------------------------------------------------------------------------

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="google_vision_api_key"></string>
</resources>


----------------------------

classpath 'com.android.tools.build:gradle:3.3.0'


----------------------------------------------------

#Tue Feb 05 16:34:12 EST 2019
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip

